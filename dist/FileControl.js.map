{"version":3,"file":"FileControl.js","sourceRoot":"","sources":["../src/FileControl.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright 2022 GoneTone\n *\n * Google Play API (Unofficial Node.js Library)\n * https://github.com/GoneToneStudio/node-google-play-api\n *\n * @author   張文相 Wenxiang Zhang (旋風之音 GoneTone) <https://blog.reh.tw>\n * @license  MIT <https://github.com/GoneToneStudio/node-google-play-api/blob/master/LICENSE>\n *\n * File Control\n */\n\nimport path from 'path'\nimport fs from 'fs'\nimport axios from 'axios'\n\n/**\n * Read Token\n *\n * @param {string} filePath File Path\n *\n * @returns {Promise<string>}\n */\nexport async function readToken (filePath: string): Promise<string> {\n  try {\n    const pathIsExists = await isExists(filePath)\n    if (pathIsExists) {\n      const data = await fs.promises.readFile(filePath, 'utf-8')\n      return data.toString()\n    }\n\n    return filePath\n  } catch (e: any) {\n    throw Error(`Read Token Failed: ${e.message}`)\n  }\n}\n\n/**\n * Write Token\n *\n * @param {string} filePath File Path\n * @param {string} token Token\n */\nexport async function writeToken (filePath: string, token: string): Promise<void> {\n  const dirName = path.dirname(filePath)\n\n  try {\n    const pathIsExists = await isExists(dirName)\n    if (!pathIsExists) {\n      await fs.promises.mkdir(dirName, {\n        recursive: true\n      })\n    }\n\n    await fs.promises.writeFile(filePath, token)\n  } catch (e: any) {\n    throw Error(`Write Token Failed: ${e.message}`)\n  }\n}\n\n/**\n * Whether the file or folder exists\n *\n * @param {string} path Path\n *\n * @returns {Promise<boolean>}\n */\nexport async function isExists (path: string): Promise<boolean> {\n  let pathIsExists: boolean\n  try {\n    await fs.promises.stat(path)\n    pathIsExists = true\n  } catch (e) {\n    pathIsExists = false\n  }\n\n  return pathIsExists\n}\n\n/**\n * Whether the Ext Name match\n *\n * @param {string} fileName File Name\n * @param {string} extName Ext Name\n *\n * @returns {boolean}\n */\nexport function isExtMatch (fileName: string, extName: string): boolean {\n  return (path.extname(fileName) === `.${extName}`)\n}\n\n/**\n * Download File\n *\n * @param {string} fileUrl File Url\n * @param {string} outputPath Output Save Path\n * @param {string} outputFileName File Save Name\n *\n * @returns {Promise<boolean>}\n */\nexport async function downloadFile (fileUrl: string, outputPath: string, outputFileName: string): Promise<boolean> {\n  const dirName = path.dirname(path.join(outputPath, outputFileName))\n\n  const pathIsExists = await isExists(dirName)\n  if (!pathIsExists) {\n    await fs.promises.mkdir(dirName, {\n      recursive: true\n    })\n  }\n\n  const writer = fs.createWriteStream(path.format({\n    dir: dirName,\n    name: outputFileName\n  }))\n\n  const response = await axios({\n    url: fileUrl,\n    method: 'GET',\n    responseType: 'stream'\n  })\n\n  response.data.pipe(writer)\n\n  return new Promise((resolve, reject) => {\n    writer.on('finish', () => {\n      resolve(true)\n    })\n    writer.on('error', (e) => {\n      reject(Error(`Download File Failed: ${e.message}`))\n    })\n  })\n}\n"]}